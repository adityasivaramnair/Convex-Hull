def jarvis_march(points):
    a =  min(points, key = lambda point: point[0])
    index = points.index(a)

    l = index
    result = []
    result.append(a)
    while (True):
        q = (l + 1) % len(points)
        for i in range(len(points)):
            if i == l:
                continue\
            d = direction(points[l], points[i], points[q])
            if d > 0 or (d == 0 and distance(points[i], points[l]) > distance(points[q], points[l])):
                q = i
        l = q
        if l == index:
            break
        result.append(points[q])

    return result

def direction(p1, p2, p3):
    return  cross_product(subtract(p3, p1), subtract(p2, p1))

def subtract(p1, p2):
        return p1[0] - p2[0], p1[1] - p2[1]

def cross_product(p1, p2):
    return p1[0] * p2[1] - p2[0] * p1[1]

def distance(p1, p2):
    distance = abs(p1[0] - p2[0]) ** 2 + abs(p1[1] - p2[1]) ** 2
    return distance

n=input("Number of points ")
n=int(n)
points = []
for i in range(0,n):
     x,y=input().split()
     x=int(x)
     y=int(y)
     li = [x,y]
     points.append(li)
     hullpoints=jarvis_march(points)
print(hullpoints)
